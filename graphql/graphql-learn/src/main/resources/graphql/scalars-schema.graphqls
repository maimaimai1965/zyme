
# From graphql-datetime-spring-boot-starter:
#                        GraphQL:              Java:
scalar Date            # Date              <-> java.util.Date
scalar LocalDate       # LocalDate         <-> java.time.LocalDate
scalar LocalDateTime   # LocalDateTime     <-> java.time.LocalDateTime
scalar LocalTime       # LocalTime         <-> java.time.LocalTime
scalar OffsetDateTime  # OffsetDateTime    <-> java.time.OffsetDateTime
scalar YearMonth       # YearMonth         <-> java.time.YearMonth
scalar Duration        # Duration          <-> java.time.Duration

#directive @specifiedBy(url: String!) on SCALAR

# From graphql-java-extended-scalars:
#scalar Date @specifiedBy(url:"https://tools.ietf.org/html/rfc3339")                         # Date      <-> java.time.LocalDate      like "1996-12-19"
#scalar LocalTime                                                                            # LocalTime <-> java.time.LocalTime      format "hh:mm:ss.sss" or "hh:mm:ss"
#scalar DateTime @specifiedBy(url: "https://scalars.graphql.org/andimarek/date-time.html")   # DateTime  <-> java.time.OffsetDateTime like "1996-12-19T16:39:57-08:00"
#scalar Time @specifiedBy(url: "https://tools.ietf.org/html/rfc3339")                        # Time      <-> java.time.OffsetTime     like "16:39:57-08:00"
scalar Char                          # GraphQLChar       <-> Character
scalar Byte                          # GraphQLByte       <-> Byte
scalar Short                         # GraphQLShort      <-> Short
scalar Long                          # GraphQLLong       <-> Long
scalar BigInteger                    # GraphQLBigInteger <-> java.math.BigInteger
scalar BigDecimal                    # GraphQLBigDecimal <-> java.math.BigDecimal
scalar Currency @specifiedBy(url:"https://en.wikipedia.org/wiki/ISO_4217")    # Currency <-> Currency
scalar Locale @specifiedBy(url: "https://tools.ietf.org/html/bcp47")          # Locale   <-> Locale
scalar Url @specifiedBy(url:"https://www.w3.org/Addressing/URL/url-spec.txt") # Url      <-> java.net.URL
scalar UUID @specifiedBy(url: "https://tools.ietf.org/html/rfc4122")          # UUID     <-> java.util.UUID
#scalar Object
#scalar JSON
#scalar RegexScalar


type ScalarInGraphQL {
    intScalar: Int
    floatScalar: Float
    stringScalar: String
    booleanScalar: Boolean
    idScalar: ID

    # Расширенные типы из graphql-datetime-spring-boot-starter.
    #                                  GraphQL:              Java:
    date: Date                       # Date              <-> java.util.Date
    localDate: LocalDate             # LocalDate         <-> java.time.LocalDate
    localDateTime: LocalDateTime     # LocalDateTime     <-> java.time.LocalDateTime
    localTime: LocalTime             # LocalTime         <-> java.time.LocalTime
    offsetDateTime: OffsetDateTime   # OffsetDateTime    <-> java.time.OffsetDateTime
    yearMonth: YearMonth             # YearMonth         <-> java.time.YearMonth
    duration: Duration               # Duration          <-> java.time.Duration

    # From graphql-java-extended-scalars:
    #                                  GraphQL:              Java:
#   date: Date                       # Date              <-> java.time.LocalDate
#   localTime: LocalTime             # LocalTime         <-> java.time.LocalTime
#   dateTime: DateTime               # DateTime          <-> java.time.OffsetDateTime
#   time: Time                       # Time              <-> java.time.OffsetTime
    charScalar: Char                 # GraphQLChar       <-> Character
    byteScalar: Byte                 # GraphQLByte       <-> Byte
    shortScalar: Short               # GraphQLShort      <-> Short
    longScalar: Long                 # GraphQLLong       <-> Long
    bigIntegerScalar: BigInteger     # GraphQLBigInteger <-> java.math.BigInteger
    bigDecimalScalar: BigDecimal     # GraphQLBigDecimal <-> java.math.BigDecimal
    currencyScalar: Currency         # Currency          <-> Currency
    localeScalar: Locale             # Locale            <-> Locale
    urlScalar: Url                   # Url               <-> java.net.URL
    uuidScalar: UUID                 # UUID              <-> java.util.UUID
}

type Query {
    scalarInGraphQLs: [ScalarInGraphQL]

    books: [Book]
    bookById(id: ID): Book
    booksByIds(ids: [ID]): [Book]

    authors: [Author]
    authorById(id: ID): Author
    authorsByIds(ids: [ID]): [Author]

    publishers: [Publisher]
    publisherById(id: ID): Publisher
    publishersByIds(ids: [ID]): [Publisher]
}

type Mutation {
    bookCreate(input: BookCreateInput): BookPayLoad
    bookUpdate(input: BookUpdateInput): BookPayLoad

    authorCreate(input: AuthorCreateInput): AuthorPayLoad
    authorUpdate(input: AuthorUpdateInput): AuthorPayLoad
}

