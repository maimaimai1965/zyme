package ua.mai.zyme.graphql.components;

import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.exc.StreamReadException;
import com.fasterxml.jackson.databind.JsonMappingException;
import graphql.GraphQLError;
import graphql.servlet.DefaultGraphQLErrorHandler;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.ConversionNotSupportedException;
import org.springframework.beans.TypeMismatchException;
import org.springframework.core.Ordered;
import org.springframework.core.annotation.Order;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.http.converter.HttpMessageNotWritableException;
import org.springframework.security.access.AccessDeniedException;
import org.springframework.security.authentication.BadCredentialsException;
import org.springframework.validation.BindException;
import org.springframework.web.HttpMediaTypeNotAcceptableException;
import org.springframework.web.HttpMediaTypeNotSupportedException;
import org.springframework.web.HttpRequestMethodNotSupportedException;
import org.springframework.web.bind.MissingPathVariableException;
import org.springframework.web.bind.MissingRequestHeaderException;
import org.springframework.web.bind.ServletRequestBindingException;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.context.request.WebRequest;
import org.springframework.web.context.request.async.AsyncRequestTimeoutException;
import org.springframework.web.multipart.support.MissingServletRequestPartException;
import org.springframework.web.servlet.NoHandlerFoundException;
import org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler;
import ua.mai.zyme.rest.exceptions.ResourceAlreadyExists;
import ua.mai.zyme.rest.exceptions.ResourceNotFoundException;
import ua.mai.zyme.rest.exceptions.RestFaults;
import ua.mai.zyme.rest.exceptions.ServiceException;
import ua.mai.zyme.rest.zoo.exceptions.RestFaultException;
import ua.mai.zyme.rest.zoo.models.DetailException;
import ua.mia.zyme.common.ServiceFault;

import javax.servlet.ServletException;
import java.lang.reflect.Field;

@Slf4j
@Order(Ordered.HIGHEST_PRECEDENCE)
@ControllerAdvice
public class RestExceptionHandler extends ResponseEntityExceptionHandler {

    private final DefaultGraphQLErrorHandler errorHandler = new DefaultGraphQLErrorHandler();

    @ExceptionHandler(Exception.class)
    public GraphQLError handleException(Exception e) {
        return errorHandler.processErrors(e);
    }
    @ExceptionHandler(value = {Exception.class})
    public ResponseEntity<Object> handleAnyException(Exception ex) {
        return new ResponseEntity<>(ex, HttpStatus.INTERNAL_SERVER_ERROR);
    }

    @ExceptionHandler(value = {AccessDeniedException.class})
    public ResponseEntity<Object> accessDeniedException(AccessDeniedException ex) {
        return new ResponseEntity<>(ex, HttpStatus.INTERNAL_SERVER_ERROR);
    }

    @ExceptionHandler(value = {BadCredentialsException.class})
    public ResponseEntity<Object> badCredentialsException(BadCredentialsException ex) {
        return new ResponseEntity<>(ex, HttpStatus.INTERNAL_SERVER_ERROR);
    }

    @ExceptionHandler(value = {ServiceFault.class})
    public ResponseEntity<Object> handleAnyException(ServiceFault ex, WebRequest request) {
        return new ResponseEntity<>(ex, HttpStatus.INTERNAL_SERVER_ERROR);
    }


    @Override
    protected ResponseEntity<Object> handleHttpMediaTypeNotSupported(HttpMediaTypeNotSupportedException ex, HttpHeaders headers, HttpStatus status, WebRequest request) {
        log.error("{}", ex.getMessage());
        return detailResponseBuild(ex, status, RestFaults.INVALID_REQUEST.code(), RestFaults.INVALID_REQUEST.message(), ex.getMessage());
    }

    @Override
    protected ResponseEntity<Object> handleHttpMediaTypeNotAcceptable(HttpMediaTypeNotAcceptableException ex, HttpHeaders headers, HttpStatus status, WebRequest request) {
        log.error("{}", ex.getMessage());
        return detailResponseBuild(ex, status, RestFaults.INVALID_REQUEST.code(), RestFaults.INVALID_REQUEST.message(), ex.getMessage());
    }

//TODO
//    @Override
//    protected ResponseEntity<Object> handleMethodArgumentNotValid(MethodArgumentNotValidException ex, HttpHeaders headers, HttpStatus status, WebRequest request) {
//        log.error("{}", ex.getMessage());
//        if (ex.getBindingResult() != null && ex.getBindingResult().getErrorCount() > 0) {
//            if (ex.getBindingResult().getAllErrors().get(0) instanceof FieldError) {
//                FieldError error = (FieldError) ex.getBindingResult().getAllErrors().get(0);
//                String defaultMessage = error.getDefaultMessage();
//                String param = error.getField();
//                if (error.getCode().equals("Size")) {
//                    return new ResponseEntity<>(
//                            RestFaultException.toBody(new RestFaultException(RestFaults.INVALID_PARAMETER_LENGTH, defaultMessage, ex, param)), HttpStatus.BAD_REQUEST);
//                } else if (error.getCode().equals("NotNull")) {
//                    //TODO AAA custom errors
////                    if (param.equals("to")) {
////                        return new ResponseEntity<>(RestFaultException.toBody(new RestFaultException(RestFaults.MISSED_CREDIT_LIMIT_TILL_DATE, null)), HttpStatus.CONFLICT);
////                    }
////                    if (param.equals("refillAmount")) {
////                        return new ResponseEntity<>(RestFaultException.toBody(new RestFaultException(RestFaults.MISSED_CREDIT_LIMIT_TMP_REFILL, null)), HttpStatus.CONFLICT);
////                    }
////                    if (param.equals("tempQuotaLimit")) {
////                        return new ResponseEntity<>(RestFaultException.toBody(new RestFaultException(RestFaults.INVALID_CREDIT_LIMIT_NULL, null)), HttpStatus.CONFLICT);
////                    }
//                    return new ResponseEntity<>(
//                            RestFaultException.toBody(new RestFaultException(RestFaults.MISSED_MANDATORY_PARAMETER, ex, param)), HttpStatus.BAD_REQUEST);
//                }
//            }
//        }
//        return new ResponseEntity<>(
//                RestFaultException.toBody(new RestFaultException(RestFaults.INVALID_REQUEST, ex.getMessage(), ex)), status);
//    }

    @Override
    protected ResponseEntity<Object> handleMissingPathVariable(MissingPathVariableException ex, HttpHeaders headers, HttpStatus status, WebRequest request) {
        log.error("{}", ex.getMessage());
        return super.handleMissingPathVariable(ex, headers, status, request);
    }

    @Override
    protected ResponseEntity<Object> handleHttpRequestMethodNotSupported(HttpRequestMethodNotSupportedException ex,
                                                                         HttpHeaders headers, HttpStatus status,
                                                                         WebRequest request) {
        log.error("{}", ex.getMessage());
        return detailResponseBuild(ex, status, RestFaults.INVALID_REQUEST.code(), RestFaults.INVALID_REQUEST.message(), ex.getMessage());
    }

//TODO
//    @Override
//    protected ResponseEntity<Object> handleMissingServletRequestParameter(MissingServletRequestParameterException ex,
//                                                                          HttpHeaders headers, HttpStatus status,
//                                                                          WebRequest request) {
//        log.error("{}", ex.getMessage());
//        return new ResponseEntity<>(
//                RestFaultException.toBody(new RestFaultException(RestFaults.MISSED_MANDATORY_PARAMETER, ex, ex.getParameterName())), status);
//    }

    @Override
    protected ResponseEntity<Object> handleServletRequestBindingException(ServletRequestBindingException ex,
                                                                          HttpHeaders headers, HttpStatus status,
                                                                          WebRequest request) {
        return super.handleServletRequestBindingException(ex, headers, status, request);
    }

    @Override
    protected ResponseEntity<Object> handleConversionNotSupported(ConversionNotSupportedException ex,
                                                                  HttpHeaders headers, HttpStatus status,
                                                                  WebRequest request) {
        return super.handleConversionNotSupported(ex, headers, status, request);
    }

    @Override
    protected ResponseEntity<Object> handleTypeMismatch(TypeMismatchException ex, HttpHeaders headers,
                                                        HttpStatus status, WebRequest request) {
        return super.handleTypeMismatch(ex, headers, status, request);
    }

//TODO
//    @Override
//    protected ResponseEntity<Object> handleHttpMessageNotReadable(HttpMessageNotReadableException ex,
//                                                                  HttpHeaders headers, HttpStatus status,
//                                                                  WebRequest request) {
//
//        if (ex.getCause() != null && ex.getCause().getCause() != null && ex.getCause().getCause() instanceof RestFaultException) {
//            RestFaultException cause = (RestFaultException) ex.getCause().getCause();
//            return new ResponseEntity<>(RestFaultException.toBody(cause), cause.getHttpStatus());
//        }
//        String errFieldName = fieldNameFromException(ex.getCause());
//        return (errFieldName != null) ?
//                new ResponseEntity<>(RestFaultException.toBody(new RestFaultException(RestFaults.INVALID_PARAMETER_VALUE, ex.getMostSpecificCause().getMessage(), ex, errFieldName)), HttpStatus.BAD_REQUEST) :
//                new ResponseEntity<>(RestFaultException.toBody(new RestFaultException(RestFaults.INVALID_REQUEST, ex.getMostSpecificCause().getMessage(), ex)), HttpStatus.BAD_REQUEST);
//    }

    @Override
    protected ResponseEntity<Object> handleHttpMessageNotWritable(HttpMessageNotWritableException ex,
                                                                  HttpHeaders headers, HttpStatus status,
                                                                  WebRequest request) {
        return super.handleHttpMessageNotWritable(ex, headers, status, request);
    }

    @Override
    protected ResponseEntity<Object> handleMissingServletRequestPart(MissingServletRequestPartException ex,
                                                                     HttpHeaders headers, HttpStatus status,
                                                                     WebRequest request) {
        return super.handleMissingServletRequestPart(ex, headers, status, request);
    }

    @Override
    protected ResponseEntity<Object> handleBindException(BindException ex, HttpHeaders headers, HttpStatus status,
                                                         WebRequest request) {
        return super.handleBindException(ex, headers, status, request);
    }

    @Override
    protected ResponseEntity<Object> handleNoHandlerFoundException(NoHandlerFoundException ex, HttpHeaders headers,
                                                                   HttpStatus status, WebRequest request) {
        return super.handleNoHandlerFoundException(ex, headers, status, request);
    }

    @Override
    protected ResponseEntity<Object> handleAsyncRequestTimeoutException(AsyncRequestTimeoutException ex,
                                                                        HttpHeaders headers, HttpStatus status,
                                                                        WebRequest webRequest) {
        return super.handleAsyncRequestTimeoutException(ex, headers, status, webRequest);
    }

    @Override
    protected ResponseEntity<Object> handleExceptionInternal(Exception ex, Object body, HttpHeaders headers,
                                                             HttpStatus status, WebRequest request) {
        return super.handleExceptionInternal(ex, body, headers, status, request);
    }

    @ExceptionHandler(ResourceNotFoundException.class)
    public ResponseEntity<Object> resourceNotFound(ResourceNotFoundException ex) {
        return new ResponseEntity<>(new Object(), HttpStatus.NOT_FOUND);
    }

    @ExceptionHandler(MissingRequestHeaderException.class)
    public ResponseEntity<Object> missingRequestHeader(MissingRequestHeaderException ex) {
        log.error("{}", ex.getCause().getMessage());
        return new ResponseEntity<>(new Object(), HttpStatus.BAD_REQUEST);
    }

//TODO
//    @ExceptionHandler(ConstraintViolationException.class)
//    public ResponseEntity<Object> constraintViolation(ConstraintViolationException ex) {
//        log.error("{}", ex.getMessage());
//        HttpStatus httpStatus = HttpStatus.BAD_REQUEST;
//        if (!ex.getConstraintViolations().isEmpty()) {
//            ConstraintViolation cv = ex.getConstraintViolations().stream().findFirst().get();
//            Class cl = (Class) cv.getConstraintDescriptor().getConstraintValidatorClasses().stream().findFirst().get();
//            if (cl.isAssignableFrom(LengthValidator.class)) {
////            if (cv.getMessage().contains("length must be")) {
//                String param = ((PathImpl) cv.getPropertyPath()).getLeafNode().getName();
//                return new ResponseEntity<>(
//                        RestFaultException.toBody(new RestFaultException(RestFaults.INVALID_PARAMETER_LENGTH, cv.getMessage(), ex, param)), httpStatus);
//            }
//        }
//        return new ResponseEntity<>(
//                RestFaultException.toBody(new RestFaultException(RestFaults.INVALID_REQUEST, ex.getMessage(), ex)), httpStatus);
//    }

    @ExceptionHandler(ResourceAlreadyExists.class)
    public ResponseEntity<Object> resourceAlreadyExists(ResourceAlreadyExists ex) {
        return new ResponseEntity<>(new Object(), HttpStatus.BAD_REQUEST);
    }

    @ExceptionHandler(ServiceException.class)
    public ResponseEntity<Object> customException(ServiceException ex) {
        return new ResponseEntity<>(new Object(), HttpStatus.BAD_REQUEST);
    }

    @ExceptionHandler(RestFaultException.class)
    public ResponseEntity<Object> restFaultException(RestFaultException ex) {
        log.error("{}", ex.getMessage());
        return new ResponseEntity<>(RestFaultException.toBody(ex), ex.getHttpStatus());
    }

    private static String fieldNameFromException(Throwable ex) {
        String fieldName = null;
        if (ex != null) {
            if (ex instanceof StreamReadException) {
                try {
                    Field field = StreamReadException.class.getDeclaredField("_processor");
                    field.setAccessible(true);
                    JsonParser _processor = (JsonParser) field.get(ex);
                    fieldName = _processor.getCurrentName();
                } catch (Exception e) {
                }
            } else if (ex instanceof JsonMappingException) {
                try {
                    Field field = JsonMappingException.class.getDeclaredField("_processor");
                    field.setAccessible(true);
                    JsonParser _processor = (JsonParser) field.get(ex);
                    fieldName = _processor.getCurrentName();
                } catch (Exception e) {
                }
            }
        }
        return fieldName;
    }

    private ResponseEntity<Object> detailResponseBuild(ServletException ex, HttpStatus status,
                                                       String errorCd, String errorMsg, String detailMsg) {
        log.error("{} errorCd:{} {} ({})", HttpStatus.valueOf(status.value()), errorCd, errorMsg, detailMsg);

        return new ResponseEntity(
                DetailException.builder()
                        .errorCd(errorCd)
                        .errorMsg(errorMsg)
                        .detailMsg(detailMsg)
                        .build(),
                HttpStatus.valueOf(status.value()));
    }

}
