package ua.mai.zyme.mockserver.r2dbcmysql;

import org.mockserver.matchers.MatchType;
import org.mockserver.mock.Expectation;
import org.mockserver.model.HttpStatusCode;
import org.mockserver.model.JsonBody;
import org.mockserver.model.MediaType;
import org.mockserver.server.initialize.ExpectationInitializer;

import java.util.concurrent.TimeUnit;

import static org.mockserver.model.HttpRequest.request;
import static org.mockserver.model.HttpResponse.response;

public class ExpectationInitializerImpl implements ExpectationInitializer {
    @Override
    public Expectation[] initializeExpectations() {
        return new Expectation[] {

// ---------------------------------------- insertMember(monoMember) <- /api/members -----------------------------------
                // For test R2dbsMysqlMockServerForMemberControllerTests.insertMember().
                new Expectation(
                        request("/api/members")
                                .withMethod("POST")
                                .withBody(JsonBody.json(
                                      """
                                      { "memberId":null,
                                        "name": "mikeTest" }
                                      """ , MatchType.STRICT)
                                )).thenRespond(
                        response().withBody("""
                                      { "memberId": 900000,
                                        "name": "mikeTest"
                                      }
                                      """,
                                      MediaType.APPLICATION_JSON_UTF_8)
                                .withStatusCode(HttpStatusCode.OK_200.code())
                ),
                // For test R2dbsMysqlMockServerForMemberControllerTests.insertMember_ERR101_NotNullNewMemberId().
                new Expectation(
                        request("/api/members")
                                .withMethod("POST")
                                .withBody(JsonBody.json(
                                        """
                                        { "memberId":-1,
                                          "name":"mikeTest"
                                        }
                                        """ , MatchType.STRICT)
                                )).thenRespond(
                        response().withBody("""
                                        { "timestamp":"2024-11-12T07:46:37.232+00:00",
                                           "path":"/api/members",
                                           "error":"Internal Server Error",
                                           "requestId":"a63ec392-1",
                                           "status":500,
                                           "errorCd":"ERR101",
                                           "errorMsg":"New member id must be null (memberId is autogenerated)"}
                                        """, MediaType.APPLICATION_JSON_UTF_8)
                                .withStatusCode(HttpStatusCode.INTERNAL_SERVER_ERROR_500.code())
                ),
// ---------------------------------------- insertMembers(fluxMember) <- /api/members/flux -----------------------------
                // For test R2dbsMysqlMockServerForMemberControllerTests.insertMember().
                new Expectation(
                        request("/api/members/flux")
                                .withMethod("POST")
                                .withBody(JsonBody.json(
                                        """
                                        [{"memberId":null,"name":"mikeTest"},
                                         {"memberId":null,"name":"rikTest"}
                                        ]
                                        """ , MatchType.STRICT)
                                )).thenRespond(
                        response().withBody("""
                                        [{"memberId":900001,
                                          "name":"mikeTest"},
                                         {"memberId":900002,
                                          "name":"rikTest"}
                                        ]
                                        """,
                                        MediaType.APPLICATION_JSON_UTF_8)
                                .withStatusCode(HttpStatusCode.OK_200.code())
                ),
// ---------------------------------------- updateMember(monoMember) <- /api/members -----------------------------------
                // For test R2dbsMysqlMockServerForMemberControllerTests.updateMember().
                new Expectation(
                        request("/api/members")
                                .withMethod("PUT")
                                .withBody(JsonBody.json(
                                        """
                                        { "memberId":900005,
                                          "name": "igorTEST" }
                                        """ , MatchType.STRICT)
                                )).thenRespond(
                        response().withBody("""
                                      { "memberId": 900005,
                                        "name": "igorTEST"
                                      }
                                      """,
                                        MediaType.APPLICATION_JSON_UTF_8)
                                .withStatusCode(HttpStatusCode.OK_200.code())
                ),
// ---------------------------------------- findMemberByMemberId(memberId) <- /api/members/{memberId} ------------------
                // For test R2dbsMysqlMockServerForMemberControllerTests.findMemberByMemberId().
//                new Expectation(
//                        request("/api/members/900004")
//                                .withMethod("GET")
//                               ).thenRespond(
//                        response().withBody("""
//                                        { "memberId": 900004,
//                                          "name": "mikeTest"
//                                        }
//                                        """,
//                                        MediaType.APPLICATION_JSON_UTF_8)
//                                .withStatusCode(HttpStatusCode.OK_200.code())
//                ),

        };
    }
}